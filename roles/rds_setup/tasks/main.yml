---
- name: Create VPC
  ec2_vpc_net:
    state: present
    region: "{{ aws_region }}"
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    dns_hostnames: yes
    dns_support: yes
    multi_ok: no
    tenancy: default
    tags:
      Name: "vpc_rds"
  register: infra_vpc

# - name: Create Internet Gateway
#   ec2_vpc_igw:
#     state: present
#     region: "{{ aws_region }}"
#     vpc_id: "{{ infra_vpc.vpc.id }}"
#     tags:
#       Name: "infra_internet_gateway"
#   register: infra_igw

- name: Create Subnet_1 for VPC
  ec2_vpc_subnet:
    state: present
    region: "{{ aws_region }}"
    az: "{{ aws_region }}a"
    cidr: "{{ subnet1_cidr }}"
    vpc_id: "{{ infra_vpc.vpc.id }}"
    tags:
      Name: "subnet1_infra"
    map_public: yes
  register: subnet1

- name: Create Subnet_2 for VPC
  ec2_vpc_subnet:
    state: present
    region: "{{ aws_region }}"
    az: "{{ aws_region }}b"
    cidr: "{{ subnet2_cidr }}"
    vpc_id: "{{ infra_vpc.vpc.id }}"
    tags:
      Name: "subnet2_infra"
    map_public: yes
  register: subnet2

- name: Create Route Table
  ec2_vpc_route_table:
    region: "{{ aws_region }}"
    vpc_id: "{{ infra_vpc.vpc.id }}"
    tags:
      Name: "{{ route_tbl_name }}"
    subnets:
      - "{{ subnet1.subnet.id }}"
      - "{{ subnet2.subnet.id }}"
    # routes:
    #   - dest: 0.0.0.0/0
    #     gateway_id: "{{ infra_igw.gateway_id }}"

- name: Create VPC subnet security group
  rds_subnet_group:
    description: Create VPC security group
    name: sg_subnet
    region: "{{ aws_region }}"
    state: present
    subnets: 
      - "{{ subnet1.subnet.id }}"
      - "{{ subnet2.subnet.id }}"
  register: sg_subnet

- name: Gather Kops VPC Info
  ec2_vpc_net_info:
    region: "{{ aws_region }}"
    filters:
        "tag:Name": "{{ CLUSTER_NAME }}"
  register: kops_vpc

- name: Get Kops route table Info
  ec2_vpc_route_table_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ CLUSTER_NAME }}"
  register: rt_kops

- name: Create VPC Security group
  ec2_group:
    name: sg_postgresdb
    description: Security group for RDS
    vpc_id: "{{ infra_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 5432
        to_port: 5432
        cidr_ip: "{{ kops_vpc.vpcs[0].cidr_block }}"
    tags:
      Name: sg_postgresdb  
  register: sg_postgresdb

# Comment this 
# - name: "Create VPC security groups"
#   ec2_group:
#     state: present
#     region: "{{ aws_region }}"
#     vpc_id: "{{ infra_vpc.vpc.id }}"
#     name: "{{ sec_gr_name }}"
#     description: "infra security group for {{ infra_vpc.vpc.id }}"
#     rules:
#       - proto: tcp
#         from_port: 22
#         to_port: 22
#         cidr_ip: 0.0.0.0/0
#       - proto: tcp
#         from_port: 8080
#         to_port: 8080
#         cidr_ip: 0.0.0.0/0
#       - proto: tcp
#         from_port: 80
#         to_port: 80
#         cidr_ip: 0.0.0.0/0
#       - proto: tcp
#         from_port: 443
#         to_port: 443
#         cidr_ip: 0.0.0.0/0
#   register: infra_sg

- name: Create RDS
  rds_instance:
    allocated_storage: 10
    allow_major_version_upgrade: no 
    apply_immediately: yes
    auto_minor_version_upgrade: no
    backup_retention_period: 0
    db_instance_class: db.t2.micro
    db_instance_identifier: rds-webapp
    engine: postgres
    master_user_password: "{{ rds_password }}"
    master_username: "{{ rds_username }}"
    multi_az: no
    publicly_accessible: no
    read_replica: no
    region: "{{ aws_region }}"
    skip_final_snapshot: yes
    state: present
    storage_type: standard
    db_subnet_group_name: sg_subnet
    vpc_security_group_ids: 
      - "{{ sg_postgresdb.group_id }}"
    # wait: yes
    
- name: Create RDS for newstories
  rds_instance:
    allocated_storage: 10
    allow_major_version_upgrade: no 
    apply_immediately: yes
    auto_minor_version_upgrade: no
    backup_retention_period: 0
    db_instance_class: db.t2.micro
    db_instance_identifier: rds-newstories
    engine: postgres
    master_user_password: "{{ rds_password }}"
    master_username: "{{ rds_username }}"
    multi_az: no
    publicly_accessible: no
    read_replica: no
    region: "{{ aws_region }}"
    skip_final_snapshot: yes
    state: present
    storage_type: standard
    db_subnet_group_name: sg_subnet
    vpc_security_group_ids: 
      - "{{ sg_postgresdb.group_id }}"
    # wait: yes  

- name: Create RDS for beststories
  rds_instance:
    allocated_storage: 10
    allow_major_version_upgrade: no 
    apply_immediately: yes
    auto_minor_version_upgrade: no
    backup_retention_period: 0
    db_instance_class: db.t2.micro
    db_instance_identifier: rds-beststories
    engine: postgres
    master_user_password: "{{ rds_password }}"
    master_username: "{{ rds_username }}"
    multi_az: no
    publicly_accessible: no
    read_replica: no
    region: "{{ aws_region }}"
    skip_final_snapshot: yes
    state: present
    storage_type: standard
    db_subnet_group_name: sg_subnet
    vpc_security_group_ids: 
      - "{{ sg_postgresdb.group_id }}"
    # wait: yes  

- name: Create RDS for topstories
  rds_instance:
    allocated_storage: 10
    allow_major_version_upgrade: no 
    apply_immediately: yes
    auto_minor_version_upgrade: no
    backup_retention_period: 0
    db_instance_class: db.t2.micro
    db_instance_identifier: rds-topstories
    engine: postgres
    master_user_password: "{{ rds_password }}"
    master_username: "{{ rds_username }}"
    multi_az: no
    publicly_accessible: no
    read_replica: no
    region: "{{ aws_region }}"
    skip_final_snapshot: yes
    state: present
    storage_type: standard
    db_subnet_group_name: sg_subnet
    vpc_security_group_ids: 
      - "{{ sg_postgresdb.group_id }}"
    wait: yes

- name: Create RDS for notifier
  rds_instance:
    allocated_storage: 10
    allow_major_version_upgrade: no 
    apply_immediately: yes
    auto_minor_version_upgrade: no
    backup_retention_period: 0
    db_instance_class: db.t2.micro
    db_instance_identifier: rds-notifier
    engine: postgres
    master_user_password: "{{ rds_password }}"
    master_username: "{{ rds_username }}"
    multi_az: no
    publicly_accessible: no
    read_replica: no
    region: "{{ aws_region }}"
    skip_final_snapshot: yes
    state: present
    storage_type: standard
    db_subnet_group_name: sg_subnet
    vpc_security_group_ids: 
      - "{{ sg_postgresdb.group_id }}"
    wait: yes

# - name: Gather InfraVPC Route Table Info
#   ec2_vpc_route_table_info:
#     region: "{{ aws_region }}"
#     filters:
#       "tag:Name": "{{ route_tbl_name }}"
#   register: route_tbl_infra_vpc

# - name: Get Caller Info
#   aws_caller_info: 
#   register: caller_info

# - name: Create VPC Peering
#   ec2_vpc_peer:
#     peer_owner_id: "{{ caller_info.account }}"
#     peer_region: "{{ aws_region }}"
#     peer_vpc_id: "{{ kops_vpc.vpcs[0].id }}"
#     region: "{{ aws_region }}"
#     state: present
#     tags:
#       Name: Kops Jenkins vpc peering
#     vpc_id: "{{ infra_vpc.vpc.id }}"
#   register: peer_req

# - name: Accept peering request
#   ec2_vpc_peer:
#     region: "{{ aws_region }}"
#     peering_id: "{{ peer_req.peering_id }}"
#     state: accept
#   register: peer_action

# - name: Update RDS vpc route table to allow traffic from kops vpc over peering connection
#   ec2_vpc_route_table:
#     lookup: id
#     route_table_id: "{{ route_tbl_infra_vpc.route_tables[0].id }}"
#     purge_routes: no
#     region: "{{ aws_region }}"
#     vpc_id: "{{ infra_vpc.vpc.id }}"
#     state: present
#     routes:
#       - dest: "{{ kops_vpc.vpcs[0].cidr_block }}"
#         vpc_peering_connection_id: "{{ peer_req.peering_id }}"

# - name: Update kops route tables to allow traffic from rds vpc over peering connection
#   ec2_vpc_route_table:
#     lookup: id
#     route_table_id: "{{ rt_kops.route_tables[0].id }}"
#     purge_routes: no
#     region: "{{ aws_region }}"
#     vpc_id: "{{ kops_vpc.vpcs[0].id }}"
#     state: present
#     routes:
#       - dest: "{{ vpc_cidr }}"
#         vpc_peering_connection_id: "{{ peer_req.peering_id }}"  